/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook {
namespace react {


  class JSI_EXPORT NativeConverterCxxSpecJSI : public TurboModule {
protected:
  NativeConverterCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value inchesToCentimeters(jsi::Runtime &rt, double inches) = 0;
  virtual jsi::Value centimetersToInches(jsi::Runtime &rt, double centimeters) = 0;
  virtual jsi::Value inchesToFeet(jsi::Runtime &rt, double inches) = 0;
  virtual jsi::Value feetToInches(jsi::Runtime &rt, double feet) = 0;
  virtual jsi::Value kilometersToMiles(jsi::Runtime &rt, double kilometers) = 0;
  virtual jsi::Value milesToKilometers(jsi::Runtime &rt, double miles) = 0;
  virtual jsi::Value feetToCentimeters(jsi::Runtime &rt, double feet) = 0;
  virtual jsi::Value centimetersToFeet(jsi::Runtime &rt, double centimeters) = 0;
  virtual jsi::Value yardsToMeters(jsi::Runtime &rt, double yards) = 0;
  virtual jsi::Value metersToYards(jsi::Runtime &rt, double meters) = 0;
  virtual jsi::Value milesToYards(jsi::Runtime &rt, double miles) = 0;
  virtual jsi::Value yardsToMiles(jsi::Runtime &rt, double yards) = 0;
  virtual jsi::Value feetToMeters(jsi::Runtime &rt, double feet) = 0;
  virtual jsi::Value metersToFeet(jsi::Runtime &rt, double meters) = 0;

};

template <typename T>
class JSI_EXPORT NativeConverterCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

protected:
  NativeConverterCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule("RTNConverter", jsInvoker),
      delegate_(static_cast<T*>(this), jsInvoker) {}

private:
  class Delegate : public NativeConverterCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeConverterCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {}

    jsi::Value inchesToCentimeters(jsi::Runtime &rt, double inches) override {
      static_assert(
          bridging::getParameterCount(&T::inchesToCentimeters) == 2,
          "Expected inchesToCentimeters(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::inchesToCentimeters, jsInvoker_, instance_, std::move(inches));
    }
    jsi::Value centimetersToInches(jsi::Runtime &rt, double centimeters) override {
      static_assert(
          bridging::getParameterCount(&T::centimetersToInches) == 2,
          "Expected centimetersToInches(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::centimetersToInches, jsInvoker_, instance_, std::move(centimeters));
    }
    jsi::Value inchesToFeet(jsi::Runtime &rt, double inches) override {
      static_assert(
          bridging::getParameterCount(&T::inchesToFeet) == 2,
          "Expected inchesToFeet(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::inchesToFeet, jsInvoker_, instance_, std::move(inches));
    }
    jsi::Value feetToInches(jsi::Runtime &rt, double feet) override {
      static_assert(
          bridging::getParameterCount(&T::feetToInches) == 2,
          "Expected feetToInches(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::feetToInches, jsInvoker_, instance_, std::move(feet));
    }
    jsi::Value kilometersToMiles(jsi::Runtime &rt, double kilometers) override {
      static_assert(
          bridging::getParameterCount(&T::kilometersToMiles) == 2,
          "Expected kilometersToMiles(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::kilometersToMiles, jsInvoker_, instance_, std::move(kilometers));
    }
    jsi::Value milesToKilometers(jsi::Runtime &rt, double miles) override {
      static_assert(
          bridging::getParameterCount(&T::milesToKilometers) == 2,
          "Expected milesToKilometers(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::milesToKilometers, jsInvoker_, instance_, std::move(miles));
    }
    jsi::Value feetToCentimeters(jsi::Runtime &rt, double feet) override {
      static_assert(
          bridging::getParameterCount(&T::feetToCentimeters) == 2,
          "Expected feetToCentimeters(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::feetToCentimeters, jsInvoker_, instance_, std::move(feet));
    }
    jsi::Value centimetersToFeet(jsi::Runtime &rt, double centimeters) override {
      static_assert(
          bridging::getParameterCount(&T::centimetersToFeet) == 2,
          "Expected centimetersToFeet(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::centimetersToFeet, jsInvoker_, instance_, std::move(centimeters));
    }
    jsi::Value yardsToMeters(jsi::Runtime &rt, double yards) override {
      static_assert(
          bridging::getParameterCount(&T::yardsToMeters) == 2,
          "Expected yardsToMeters(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::yardsToMeters, jsInvoker_, instance_, std::move(yards));
    }
    jsi::Value metersToYards(jsi::Runtime &rt, double meters) override {
      static_assert(
          bridging::getParameterCount(&T::metersToYards) == 2,
          "Expected metersToYards(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::metersToYards, jsInvoker_, instance_, std::move(meters));
    }
    jsi::Value milesToYards(jsi::Runtime &rt, double miles) override {
      static_assert(
          bridging::getParameterCount(&T::milesToYards) == 2,
          "Expected milesToYards(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::milesToYards, jsInvoker_, instance_, std::move(miles));
    }
    jsi::Value yardsToMiles(jsi::Runtime &rt, double yards) override {
      static_assert(
          bridging::getParameterCount(&T::yardsToMiles) == 2,
          "Expected yardsToMiles(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::yardsToMiles, jsInvoker_, instance_, std::move(yards));
    }
    jsi::Value feetToMeters(jsi::Runtime &rt, double feet) override {
      static_assert(
          bridging::getParameterCount(&T::feetToMeters) == 2,
          "Expected feetToMeters(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::feetToMeters, jsInvoker_, instance_, std::move(feet));
    }
    jsi::Value metersToFeet(jsi::Runtime &rt, double meters) override {
      static_assert(
          bridging::getParameterCount(&T::metersToFeet) == 2,
          "Expected metersToFeet(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::metersToFeet, jsInvoker_, instance_, std::move(meters));
    }

  private:
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace react
} // namespace facebook
